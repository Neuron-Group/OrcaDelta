// ptr_ans->CHILD[2] = ptr_ans->CHILD[2]
                    // ptr_this->CHILD[2] = ptr_this->CHILD[2]
                    if (ptr_ans->CHILD[2] == ptr_this->CHILD[2]) return;

                    if (ptr_this->CHILD[2] == nullptr) {
                        del(ptr_ans->CHILD[2]);
                        return;
                    }

                    if (ptr_ans->CHILD[2] == nullptr) {
                        ptr_ans->CHILD[2] = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(ptr_this->CHILD[2]->deepth);
                        *(ptr_ans->CHILD[2]) = *(ptr_this->CHILD[2]);
                    }

                    std::queue<TREENODE<Eigen::Matrix<T, unit_size, unit_size>> *> q_ptr_this_copy;
                    std::queue<TREENODE<Eigen::Matrix<T, unit_size, unit_size>> *> q_ptr_b_copy;
                    
                    TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * ptr_this_copy;
                    TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * ptr_b_copy;
                    
                    q_ptr_this_copy.push(ptr_ans->CHILD[2]);
                    q_ptr_b_copy.push(ptr_this->CHILD[2]);

                    while(!q_ptr_this_copy.empty()) {
                        ptr_this_copy = q_ptr_this_copy.front();
                        ptr_b_copy = q_ptr_b_copy.front();

                        if (ptr_this_copy->deepth == 0) {
                            (*(ptr_this_copy)) = (*(ptr_b_copy));
                        } else {
                            for (short i = 0; i < 4; i++){
                                if (ptr_b_copy->CHILD[i] != nullptr) {
                                    if (ptr_this_copy->CHILD[i] == nullptr) {
                                        ptr_this_copy->CHILD[i] = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(
                                                ptr_this_copy->deepth - 1
                                            );
                                    }
                                    q_ptr_this_copy.push(ptr_this_copy->CHILD[i]);
                                    q_ptr_b_copy.push(ptr_b_copy->CHILD[i]);
                                } else {
                                    del(ptr_this_copy->CHILD[i]);
                                }
                            }
                        }

                        q_ptr_this_copy.pop();
                        q_ptr_b_copy.pop();
                    }

                    return;
                    // 