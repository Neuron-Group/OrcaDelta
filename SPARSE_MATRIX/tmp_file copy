    template<class T, size_t unit_size>
    void MAT<T, unit_size>::mul_node_left(
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * & a,
        const TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * src
    ) {
        if (a == nullptr) {
            return;
        }

        if (src == nullptr) {
            a = nullptr;
            return;
        }

        if(a->deepth == 0) {
            if (a->dataNode == nullptr) {
                return;
            }
            if (src->dataNode == nullptr) {
                a = nullptr;
                return;
            }
            (*(a->dataNode)) = (*(src->dataNode)) * (*(a->dataNode));
            return;
        }

        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M1
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M2
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M3
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M4
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M5
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M5_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M6
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M6_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M7
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M7_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        
        copy_node(M1, a->CHILD[2]);
        copy_node(M2, src->CHILD[0]);
        copy_node(M3, src->CHILD[1]);
        copy_node(M4, a->CHILD[1]);
        copy_node(M5, src->CHILD[0]);
        copy_node(M5_, a->CHILD[0]);
        copy_node(M6, src->CHILD[2]);
        copy_node(M6_, a->CHILD[1]);
        copy_node(M7, src->CHILD[0]);
        copy_node(M7_, a->CHILD[0]);

        sub_node(M1, a->CHILD[3]);
        mul_node_left(M1, src->CHILD[0]);

        add_node(M2, src->CHILD[2]);
        mul_node_right(M2, a->CHILD[3]);

        add_node(M3, src->CHILD[3]);
        mul_node_right(M3, a->CHILD[0]);

        sub_node(M4, a->CHILD[0]);
        mul_node_left(M4, src->CHILD[3]);

        add_node(M5, src->CHILD[3]);
        add_node(M5_, a->CHILD[3]);

        sub_node(M6, src->CHILD[3]);
        add_node(M6_, a->CHILD[3]);

        sub_node(M7, src->CHILD[1]);
        add_node(M7_, a->CHILD[2]);

        mul_node_right(M5, M5_);
        del(M5_);

        mul_node_right(M6, M6_);
        del(M6_);

        mul_node_right(M7, M7_);
        del(M7_);

        add_node(M6, M4);
        add_node(M6, M5);
        sub_node(M6, M2);

        add_node(M2, M1);

        add_node(M4, M3);

        add_node(M5, M1);
        sub_node(M5, M3);
        sub_node(M5, M7);

        del(M1);
        del(M3);
        del(M7);

        a->CHILD[0] = M6;
        a->CHILD[1] = M4;
        a->CHILD[2] = M2;
        a->CHILD[3] = M5;
    }

    template<class T, size_t unit_size>
    void MAT<T, unit_size>::mul_node_right(
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * & a,
        const TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * src
    ) {
        if (a == nullptr) {
            return;
        }

        if (src == nullptr) {
            a = nullptr;
            return;
        }

        if(a->deepth == 0) {
            if (a->dataNode == nullptr) {
                return;
            }
            if (src->dataNode == nullptr) {
                a = nullptr;
                return;
            }
            (*(a->dataNode)) = (*(a->dataNode)) * (*(src->dataNode));
            return;
        }

        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M1
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M2
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M3
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M4
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M5
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M5_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M6
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M6_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M7
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        TREENODE<Eigen::Matrix<T, unit_size, unit_size>> * M7_
            = new TREENODE<Eigen::Matrix<T, unit_size, unit_size>>(a->deepth - 1);
        
        copy_node(M1, src->CHILD[2]);
        copy_node(M2, a->CHILD[0]);
        copy_node(M3, a->CHILD[1]);
        copy_node(M4, src->CHILD[1]);
        copy_node(M5, a->CHILD[0]);
        copy_node(M5_, src->CHILD[0]);
        copy_node(M6, a->CHILD[2]);
        copy_node(M6_, src->CHILD[1]);
        copy_node(M7, a->CHILD[0]);
        copy_node(M7_, src->CHILD[0]);

        sub_node(M1, src->CHILD[3]);
        mul_node_left(M1, a->CHILD[0]);

        add_node(M2, a->CHILD[2]);
        mul_node_right(M2, src->CHILD[3]);

        add_node(M3, a->CHILD[3]);
        mul_node_right(M3, src->CHILD[0]);

        sub_node(M4, src->CHILD[0]);
        mul_node_left(M4, a->CHILD[3]);

        add_node(M5, a->CHILD[3]);
        add_node(M5_, src->CHILD[3]);

        sub_node(M6, a->CHILD[3]);
        add_node(M6_, src->CHILD[3]);

        sub_node(M7, a->CHILD[1]);
        add_node(M7_, src->CHILD[2]);

        mul_node_right(M5, M5_);
        del(M5_);

        mul_node_right(M6, M6_);
        del(M6_);

        mul_node_right(M7, M7_);
        del(M7_);

        add_node(M6, M4);
        add_node(M6, M5);
        sub_node(M6, M2);

        add_node(M2, M1);

        add_node(M4, M3);

        add_node(M5, M1);
        sub_node(M5, M3);
        sub_node(M5, M7);

        del(M1);
        del(M3);
        del(M7);

        a->CHILD[0] = M6;
        a->CHILD[1] = M4;
        a->CHILD[2] = M2;
        a->CHILD[3] = M5;
    }